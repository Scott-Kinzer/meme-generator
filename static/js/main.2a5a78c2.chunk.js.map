{"version":3,"sources":["redux/constants/constants.js","redux/actions/setMemeAction.js","redux/reducers/memeReducer.js","component/buttonComponent/buttonComponent.js","redux/actions/loaderAction.js","services/fetchData.js","img/loader.jpg","component/imageComponent/imageComponent.js","App.js","redux/store/store.js","index.js"],"names":["LOAD_MEME","setMemeAction","data","type","payload","stateMeme","dataMeme","fetch","Button","dispatch","useDispatch","className","onClick","a","setTimeout","then","item","json","newMeme","memes","mem","Math","round","random","ImageComponent","dataOfMeme","useSelector","state","dataReducer","url","src","alt","photo","App","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAAO,IAAMA,EAAY,YCGlB,SAASC,EAAcC,GAC1B,MAAO,CACHC,KAAMH,EACNI,QAASF,GCDjB,IAAIG,EAAY,CACZC,SAAU,GAGVC,OAAO,G,uBCLJ,SAASC,IAEZ,IAAMC,EAAWC,cAKjB,OACQ,cAAC,IAAD,CAAWC,UAAU,SAASR,KAAK,UAAUS,QALtC,WACXH,ED0BqB,uCAAM,WAAMA,GAAN,SAAAI,EAAA,sDAG/BJ,EEpCO,CACHN,KAAM,mBFoCTW,WAAU,sBAAC,gCAAAD,EAAA,sEGpCNN,MAAM,qCACPQ,MAAK,SAAAb,GAAI,OAAIA,KACda,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAb,GAAI,OAAIA,EAAKA,QHiCV,OACJA,EADI,OAEJgB,EAAUhB,EAAKiB,MACfC,EAAMF,EAAQG,KAAKC,MAAsB,IAAhBD,KAAKE,WAClCd,EAASR,EAAcmB,IACvBX,EE1CG,CACHN,KAAM,mBFoCE,2CAMV,KAV6B,2CAAN,wDCtBjB,mBGZG,UAA0B,mCCElC,SAASqB,IAEZ,IAAMC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAAatB,SACvDC,EAAQmB,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAAarB,MAEjDsB,EAAOJ,EAAPI,IAEP,OAEI,8BACKtB,EAAQ,qBAAKI,UAAU,QAAQmB,IAAKD,EAAKE,IAAI,KAAO,qBAAKpB,UAAU,QAAQmB,IAAKE,EAAOD,IAAI,OCCzFE,MATf,WACE,OACE,sBAAKtB,UAAU,MAAf,UACE,cAACH,EAAD,IACE,cAACgB,EAAD,Q,gBCFJU,EAAcC,YACd,CACIP,YPKiB,WAAiC,IAAhCD,EAA+B,uDAAvBtB,EAAW+B,EAAY,uCAErD,OAAQA,EAAOjC,MACX,KAAKH,EAIG,OAHJ2B,EAAK,2BACMA,GADN,IACarB,SAAS,eAAK8B,EAAOhC,WAI3C,IAAK,iBACD,OAAO,2BACAuB,GADP,IACcpB,OAAQoB,EAAMpB,QAGhC,QACI,OAAOoB,MObJU,EAJDC,YAAaJ,EAAaK,YAAgBC,M,MCHxDC,IAASC,OACP,eAAC,IAAMC,WAAP,WACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACG,cAAC,EAAD,MAFP,OAKAO,SAASC,eAAe,W","file":"static/js/main.2a5a78c2.chunk.js","sourcesContent":["export const LOAD_MEME = 'LOAD_MEME';","import {LOAD_MEME} from \"../constants/constants\";\n\n\nexport function setMemeAction(data) {\n    return {\n        type: LOAD_MEME,\n        payload: data\n    }\n}","import {fetchData} from \"../../services/fetchData\";\nimport {loaderAction} from \"../actions/loaderAction\";\nimport {LOAD_MEME} from \"../constants/constants\";\nimport {setMemeAction} from \"../actions/setMemeAction\";\n\nlet stateMeme = {\n    dataMeme: {\n\n    },\n    fetch: true\n}\n\n\nexport let memeReducer = (state = stateMeme, action)  => {\n\n    switch (action.type) {\n        case LOAD_MEME:\n            state = {\n                    ...state, dataMeme: {...action.payload}\n                }\n                return state;\n\n        case \"LOADER_CHANGER\":\n            return  {\n                ...state, fetch: !state.fetch\n            }\n\n        default:\n            return state;\n\n    }\n\n}\n\nexport let fetchUsersThunk = () => async dispatch => {\n\n\n    dispatch(loaderAction());\n     setTimeout(async()=> {\n        let data = await fetchData();\n        let newMeme = data.memes;\n        let mem = newMeme[Math.round(Math.random() * 100)]\n        dispatch(setMemeAction(mem));\n        dispatch(loaderAction());\n    },500);\n\n}\n","import {fetchUsersThunk} from \"../../redux/reducers/memeReducer\";\nimport {useDispatch} from \"react-redux\";\nimport { Button  as AntButton} from 'antd';\n\nexport function Button() {\n\n    const dispatch = useDispatch()\n    let btnClick = () => {\n        dispatch(fetchUsersThunk());\n    }\n\n    return (\n            <AntButton className=\"button\" type=\"primary\" onClick={btnClick}>CLICK</AntButton>\n    );\n}\n\n","export function loaderAction() {\n    return {\n        type: \"LOADER_CHANGER\"\n    }\n}","export function fetchData() {\n\n   return fetch('https://api.imgflip.com/get_memes')\n        .then(data => data)\n       .then(item => item.json())\n       .then(data => data.data);\n}","export default __webpack_public_path__ + \"static/media/loader.693639fa.jpg\";","import {useSelector} from \"react-redux\";\nimport photo from '../../img/loader.jpg';\nexport function ImageComponent() {\n\n    const dataOfMeme = useSelector((state) => state.dataReducer).dataMeme;\n    const fetch = useSelector((state) => state.dataReducer).fetch;\n\n    const {url} = dataOfMeme;\n\n    return (\n\n        <div>\n            {fetch ? <img className=\"photo\" src={url} alt=\"\"/> : <img className=\"photo\" src={photo} alt=\"\"/>}\n        </div>\n\n    );\n}\n","import './App.css';\nimport {Button} from \"./component/buttonComponent/buttonComponent\";\nimport {ImageComponent} from \"./component/imageComponent/imageComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button />\n        <ImageComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","import {memeReducer} from \"../reducers/memeReducer\";\nimport { combineReducers } from 'redux'\nimport thunk from 'redux-thunk';\n\nimport { createStore, applyMiddleware } from 'redux';\n\nlet rootReducer = combineReducers(\n    {\n        dataReducer: memeReducer\n    })\n\nconst store = createStore( rootReducer, applyMiddleware(thunk))\n\n\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store/store\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n         <App />\n      </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}